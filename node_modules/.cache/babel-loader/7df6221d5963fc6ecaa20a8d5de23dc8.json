{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport youtube from \"../apis/youtube\";\nconst KEY = 'AIzaSyD2-b7jGHJaMV45LiVBQI1OVHswMcVFpqk';\n\nconst useVideos = defaultSearchTerm => {\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    search(defaultSearchTerm);\n  }, [defaultSearchTerm]);\n\n  const search = async term => {\n    const response = await youtube.get('/search', {\n      params: {\n        part: 'snippet',\n        type: 'video',\n        maxResults: 5,\n        key: KEY,\n        q: term\n      }\n    });\n    setVideos(response.data.items);\n  };\n\n  return {\n    videos: videos,\n    search: search\n  };\n};\n\nexport default useVideos;","map":{"version":3,"sources":["/Users/nadjib_belloundja/React_formation/videos-hooks/src/hooks/useVideos.js"],"names":["useState","useEffect","youtube","KEY","useVideos","defaultSearchTerm","videos","setVideos","search","term","response","get","params","part","type","maxResults","key","q","data","items"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,MAAMC,GAAG,GAAG,yCAAZ;;AAEA,MAAMC,SAAS,GAAIC,iBAAD,IAAuB;AACrC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,MAAM,CAACH,iBAAD,CAAN;AACH,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;;AAIA,QAAMG,MAAM,GAAG,MAAMC,IAAN,IAAc;AACzB,UAAMC,QAAQ,GAAG,MAAMR,OAAO,CAACS,GAAR,CAAY,SAAZ,EAAuB;AAC1CC,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAE,SADF;AAEJC,QAAAA,IAAI,EAAE,OAFF;AAGJC,QAAAA,UAAU,EAAE,CAHR;AAIJC,QAAAA,GAAG,EAAEb,GAJD;AAKJc,QAAAA,CAAC,EAAER;AALC;AADkC,KAAvB,CAAvB;AAUAF,IAAAA,SAAS,CAACG,QAAQ,CAACQ,IAAT,CAAcC,KAAf,CAAT;AACH,GAZD;;AAcA,SAAO;AAACb,IAAAA,MAAM,EAAEA,MAAT;AAAiBE,IAAAA,MAAM,EAAEA;AAAzB,GAAP;AACH,CAtBD;;AAwBA,eAAeJ,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport youtube from \"../apis/youtube\";\n\nconst KEY = 'AIzaSyD2-b7jGHJaMV45LiVBQI1OVHswMcVFpqk';\n\nconst useVideos = (defaultSearchTerm) => {\n    const [videos, setVideos] = useState([]);\n\n    useEffect(() => {\n        search(defaultSearchTerm);\n    }, [defaultSearchTerm]);\n\n    const search = async term => {\n        const response = await youtube.get('/search', {\n            params: {\n                part: 'snippet',\n                type: 'video',\n                maxResults: 5,\n                key: KEY,\n                q: term,\n            },\n        });\n\n        setVideos(response.data.items);\n    };\n\n    return {videos: videos, search: search};\n};\n\nexport default useVideos;\n"]},"metadata":{},"sourceType":"module"}